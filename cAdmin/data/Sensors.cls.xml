<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="cAdmin.data.Sensors">
<Description>
Class for working with SYS.Monitor.SystemSensors object. 
Create instance of this class and access the properties -
they represent actual values at the time of accessing.</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>63242,50305.449154</TimeCreated>

<Property name="Sensors">
<Type>SYS.Monitor.SystemSensors</Type>
<Private>1</Private>
</Property>

<Property name="SystemStartupDateTime">
<Type>%String</Type>
<Private>1</Private>
<ReadOnly>1</ReadOnly>
</Property>

<Property name="CPU">
<Description>
System CPU usage (percent)</Description>
<Type>%Integer</Type>
</Property>

<Property name="LockTable">
<Description>
Percentage of the lock table in use</Description>
<Type>%Numeric</Type>
</Property>

<Property name="CSPGatewayLatency">
<Description>
Time (milliseconds) required to obtain a response from the listed CSP gateway server 
when fetching the metrics represented by the CSP sensor objects.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="SMH">
<Description>
Percentage of the shared memory heap in use</Description>
<Type>%Integer</Type>
</Property>

<Property name="JournalSpace">
<Description>
Free disk space, availible for journals</Description>
<Type>%Numeric</Type>
</Property>

<Property name="FreeJournalSpacePercent">
<Description>
Free disk space, in percent to journal size</Description>
<Type>%Numeric</Type>
</Property>

<Property name="Uptime">
<Description>
Cache Server Uptime in seconds</Description>
<Type>%String</Type>
</Property>

<Property name="LicenseStatus">
<Description>
Valid, Invalid, or Troubled (expiring) </Description>
<Type>%String</Type>
</Property>

<Property name="LicenseExpirationDate">
<Description>
Active license expiration date</Description>
<Type>%String</Type>
</Property>

<Property name="LicenseInvalidReason">
<Description>
Reason the key is invalid or in a troubled state</Description>
<Type>%String</Type>
</Property>

<Parameter name="NotAvailible">
<Default>NaN</Default>
</Parameter>

<Method name="DBStats">
<Description>
Get information about databases in JSON format</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	do ..Sensors.GetDBStats()
	
	set DBs=##class(cAdmin.data.Databases).%New()
	set DBPath=$o(..Sensors.DBStats(""))
	while DBPath'="" {
		set DB=##class(cAdmin.data.Database).%New()
		set DB.Path=DBPath
		set DB.DirectorySpace=..Sensors.SensorReading("DirectorySpace",DBPath)
		set DB.DBWrites=..Sensors.SensorReading("DBWrites",DBPath)
		set DB.DBReads=..Sensors.SensorReading("DBReads",DBPath)
		set DB.DBLatency=..Sensors.SensorReading("DBLatency",DBPath)
		set DB.DBStats=..Sensors.DBStats(DBPath)
		do DBs.Databases.Insert(DB)
		set DBPath=$o(..Sensors.DBStats(DBPath))
	}
	
	set DBcount=DBs.Databases.Count()

	set rs=##class(%Library.ResultSet).%New("SYS.Database:FreeSpace")
	do rs.Execute()
	while rs.Next() {
		for i=1:1:DBcount {
			if rs.Data("Directory")=DBs.Databases.GetAt(i).Path {
				set DBs.Databases.GetAt(i).Name=rs.Data("DatabaseName")
				set DBs.Databases.GetAt(i).Size=rs.Data("SizeInt")
				quit
			}
		}
		
	}
	
	quit ##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONFromObject(,DBs,,,,"aeloqtuw")
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
Create and Initialyse System Sensors after object creation</Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	if ('..Sensors) { 
		set ..Sensors=##class(SYS.Monitor.SystemSensors).%New()
		try	{
			do ..Sensors.GetSensors()
		} catch ex {
		}
		do ..SystemStartupDateTimeSet()
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SystemStartupDateTimeSet">
<Internal>1</Internal>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ..SystemStartupDateTime="" {
		set now=$H
		set SecondsUptime = $p(..Sensors.SystemTime,".","1")
		if SecondsUptime >= 86400 
		{
			set DaysUptime = SecondsUptime \ 86400
		} else {
			set DaysUptime = 0

		}		
		set FractionSecondsUptime = SecondsUptime # 86400
		if $p(now,",",2)>=FractionSecondsUptime {
			set StartupDate=$p(now,",",1)-DaysUptime
			set StartupTime=$p(now,",",2)-FractionSecondsUptime
		} else {
			set StartupDate = $p(now,",",1)-DaysUptime-1
			set StartupTime = 86400 + $p(now,",",2)-FractionSecondsUptime
		}
		set i%SystemStartupDateTime=StartupDate_","_StartupTime
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="UptimeGet">
<Internal>1</Internal>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		set now=$H
		set StartupDateTime=..SystemStartupDateTime

		if $p(now,",",2)>$p(StartupDateTime,",",2) {
			set DaysUptime=$p(now,",",1)-$p(StartupDateTime,",",1)
			set FractionSecondsUptime=$p(now,",",2)-$p(StartupDateTime,",",2)
		} else {
			set DaysUptime=$p(now,",",1)-$p(StartupDateTime,",",1)-1
			set FractionSecondsUptime=86400 + $p(now,",",2)-$p(StartupDateTime,",",2)
		}
		
	quit DaysUptime*86400+FractionSecondsUptime
]]></Implementation>
</Method>

<Method name="CPUGet">
<Internal>1</Internal>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	try {
	do ..Sensors.GetCPU()	
   	set CPU =  ..Sensors.SensorReading("CPUusage")
	} catch {
		set CPU = ..#NotAvailible
	}
	if CPU > 100 set CPU = 0  /// Overflows
	quit CPU
]]></Implementation>
</Method>

<Method name="FreeJournalSpacePercentGet">
<Internal>1</Internal>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	try {
		set free = ..JournalSpace
   		set journaldir = ##class(%SYS.Journal.System).GetPrimaryDirectory()
   		set journalsize = ##class(cAdmin.Utils).GetDirectorySize(journaldir)
   		set journalsizeMB = journalsize / ( 1024 * 1024 )
   		set FreeJournalSpace = $NORMALIZE(100 * ( free / (free + journalsizeMB)),6)	
	} catch {
		set FreeJournalSpace = ..#NotAvailible
	}
	quit FreeJournalSpace
]]></Implementation>
</Method>

<Method name="LockTableGet">
<Internal>1</Internal>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
   	try {
		do ..Sensors.GetLockTable()	
 	  	set LockTable =  ..Sensors.SensorReading("LockTablePercentFull")
	} catch {
		set LockTable = ..#NotAvailible
	}
	quit LockTable
]]></Implementation>
</Method>

<Method name="CSPGatewayLatencyGet">
<Internal>1</Internal>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	
   	try {
		do ..Sensors.GetCSPGateway()	
 	  	set CSPGatewayLatency = ..Sensors.SensorReading("CSPGatewayLatency",$o(..Sensors.SensorReading("CSPGatewayLatency","")))
	} catch {
		set CSPGatewayLatency = ..#NotAvailible
	}
	quit CSPGatewayLatency
]]></Implementation>
</Method>

<Method name="SMHGet">
<Internal>1</Internal>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
   	try {
		do ..Sensors.GetSMH()	
 	  	set SMH = ..Sensors.SensorReading("SMHPercentFull")
	} catch {
		set SMH = ..#NotAvailible
	}
	quit SMH
]]></Implementation>
</Method>

<Method name="JournalSpaceGet">
<Internal>1</Internal>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
 
	try {
		do ..Sensors.GetJournalSpace()	
 	  	set JournalSpace = ..Sensors.SensorReading("JournalSpace")
	} catch {
		set JournalSpace = ..#NotAvailible
	}
	quit JournalSpace
]]></Implementation>
</Method>

<Method name="LicenseStatusGet">
<Internal>1</Internal>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(%SYSTEM.License).GetKeyStatus()
]]></Implementation>
</Method>

<Method name="LicenseExpirationDateGet">
<Internal>1</Internal>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $zdate($SYSTEM.License.KeyExpirationDate())
]]></Implementation>
</Method>

<Method name="LicenseInvalidReasonGet">
<Internal>1</Internal>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $SYSTEM.License.GetKeyInvalidReason()
]]></Implementation>
</Method>
</Class>
</Export>
